package prepare.map;

import java.util.Objects;

public class CustomMap<K,V> {
	
	private int capacity = 16;
	
	private Entry<K,V>[] table;
	
	public CustomMap(){
		this.table = new Entry[capacity];
	}
	
	public CustomMap(int capacity){
		this.capacity = capacity;
		this.table = new Entry[capacity];
	}
	
	
	public void put(K key, V value) {
		int index = index(key);
		Entry<K, V> entry = new Entry<K, V>(value, key, null);
		if(table[index] == null) {
			table[index] = entry;
		} else {
			Entry<K, V> previousNode = null;
			Entry<K, V> currentNode = table[index];
			while(currentNode != null){
				if(currentNode.getKey().equals(key)){
					currentNode.setValue(value);
					break;
				}
				previousNode = currentNode;
				currentNode = currentNode.getNext();
				
			}
			if(previousNode != null) {
				previousNode.setNext(entry);
			}
		}
	}
	
	public V get(K key) throws Exception {
		V value = null;
		int index = index(key);
		if(table[index]==null) {
			return null;
		} else {
			Entry<K, V> entry = table[index];
			while(entry!=null) {
				if(entry.getKey().equals(key)) {
					value = entry.getValue();
				}
				entry = entry.getNext();
			}
		}
		return value;
	}
	  public void display(){
	        for(int i = 0; i < capacity; i++){
	            if(table[i] != null){
	                Entry<K, V> currentNode = table[i];
	                while (currentNode != null){
	                    System.out.println(String.format("Key is %s and value is %s", currentNode.getKey(), currentNode.getValue()));
	                    currentNode = currentNode.getNext();
	                }
	            }
	        }
	    }
	
	private int index(K key){
        if(key == null){
            return 0;
        }
        return Math.abs(key.hashCode() % capacity);
    }

}
