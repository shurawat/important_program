package backtracking;

public class KnightTour {
	
	int boardSize;
	int[][] board;
	int[] xMoves = {};
	int[] yMoves = {};
	
	public KnightTour(int boardSize) {
		this.boardSize = boardSize;
		board = new int[boardSize][boardSize];
	}
	
	private void initialLoad() {
		for(int i=0;i<boardSize; i++) {
			for(int j=0;j<boardSize; j++) {
				board[i][j] = Integer.MIN_VALUE;
			}
		}
	}
	
	
	private void solve() {
		if(solution(board[0][0], 0, 0));
	}
	
	private boolean solution(int step, int x, int y) {
		if(step == boardSize * boardSize) {
			return true;
		}
		for(int i =0; i<xMoves.length; i++) {
			int nextX = x + i;
			int nextY = y + i;
			if(isValid(x, y)) {
				
			}
		}
	}
	private boolean isValid(int x, int y) {
		if(x<0||x>xMoves.length) return false;
		if(y<0||y>yMoves.length) return false;
		if(board[x][y] != Integer.MIN_VALUE) return false;
		return true;
	}
	private void print() {
		for(int i=0;i<boardSize; i++) {
			for(int j=0;j<boardSize; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
	}

}
