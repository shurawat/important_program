package backtracking;

public class NQueensProblem {
	
	int[][] chessBoard;
	int numberOfQueens;
	
	public NQueensProblem(int numberOfQueens) {
		this.numberOfQueens = numberOfQueens;
		this.chessBoard = new int[numberOfQueens][numberOfQueens];
	}
	
	public void solve() {
		if(setQueens(0)) {
			printQueens();
		}else {
			System.out.println("There is no solution..");
		}
	}
	
	private boolean setQueens(int columnIndex) {
		
		if(columnIndex == numberOfQueens) {
			return true;
		}
		
		for(int rowIndex=0;rowIndex<numberOfQueens;rowIndex++) {
			if(isValidPosition(rowIndex, columnIndex)) {
				chessBoard[rowIndex][columnIndex] = 1;
				if(setQueens(columnIndex + 1)) {
					return true;
				}
			}
			chessBoard[rowIndex][columnIndex] = 0;
			
		}
		
	}
	
	private boolean isValidPosition(int row, int column) {
		return true;
	}
	
	private void printQueens() {
		for(int row =0;row<numberOfQueens; row++) {
			for(int col =0; col<numberOfQueens; col++) {
				if(chessBoard[row][col] ==1) {
					System.err.print(" * ");
				} else {
					System.out.print(" - ");
				}
			}
			System.out.println();
		}
	}

}
